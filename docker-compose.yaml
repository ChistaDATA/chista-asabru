version: "3.8"
services:
  clickhouse-1:
    image: clickhouse/clickhouse-server:22.6
    ports:
      - "9000:9000"
      - "9440:9440"
      - "8123:8123"
      - "8443:8443"
    networks:
      - backend
    ## Uncomment the below lines to setup TLS for wire level protocol
    ## Reference : https://www.bytebase.com/blog/how-to-configure-clickhouse-ssl-connection/
    # volumes:
    #   - /Users/midhundarvin/software/openssl/ca.pem:/etc/clickhouse-server/ca.pem
    #   - /Users/midhundarvin/software/openssl/server.pem:/etc/clickhouse-server/server.pem
    #   - /Users/midhundarvin/software/openssl/server.key:/etc/clickhouse-server/server.key
    #   - /Users/midhundarvin/software/openssl/dhparam.pem:/etc/clickhouse-server/dhparam.pem
    #   - /Users/midhundarvin/software/openssl/config.xml:/etc/clickhouse-server/config.xml

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
    networks:
      - backend

  zk-monitor:
    build:
      context: ./lib/zk-cluster-monitor-client
      dockerfile: ./Dockerfile
    environment:
      MODE: monitor
      ZK_HOST: zookeeper:2181
      ZK_ROOT_NODE: /cluster1
      ASABRU_API_URL: http://proxy:8080/updateService
    links:
      - "zookeeper:zookeeper"
      - "intercepting-proxy:proxy"
    depends_on:
      - zookeeper
      - intercepting-proxy
    networks:
      - backend

  zk-client-1:
    build:
      context: ./lib/zk-cluster-monitor-client
      dockerfile: ./Dockerfile
    environment:
      MODE: client
      ZK_HOST: zookeeper:2181
      ZK_ROOT_NODE: /cluster1
    links:
      - "zookeeper:zookeeper"
    depends_on:
      - zk-monitor
      - intercepting-proxy
    networks:
      - backend

  intercepting-proxy:
    # platform: linux/amd64
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - "8080:8080"
      - "9100:9100"
      - "9110:9110"
      - "9120:9120"
      - "9130:9130"
      - "9140:9140"
      - "9150:9150"
      - "9160:9160"
      - "9170:9170"
    environment:
      # CONFIG_FILE_URL: https://pastebin.com/raw/2Ts9aeN7 # Thread per client version
      #      CONFIG_FILE_URL: https://pastebin.com/raw/72vCDJvm # libuv version
      CONFIG_FILE_PATH: /bin/config.xml
    # network_mode: "host"
    links:
      - "clickhouse-1:clickhouse-1"
      - "postgres-1:postgres-1"
    #      - "serving-proxy-1:cluster-1"
    #      - "serving-proxy-2:cluster-2"
    #      - "serving-proxy-3:cluster-3"
    #      - "serving-proxy-4:cluster-4"
    networks:
      - backend

  #  serving-proxy-1:
  #    build:
  #      context: .
  #      dockerfile: ./Dockerfile
  #    expose:
  #      - "9100"
  #      - "9110"
  #    ports:
  #      - "9111:9110"
  #    environment:
  #      CONFIG_FILE_URL: https://pastebin.com/raw/NSufsj00
  #      CONFIG_FILE_PATH: /tmp/config.xml
  #    links:
  #      - "clickhouse-1:database"
  #    networks:
  #      - backend
  #
  #  serving-proxy-2:
  #    build:
  #      context: .
  #      dockerfile: ./Dockerfile
  #    expose:
  #      - "9100"
  #      - "9110"
  #    ports:
  #      - "9112:9110"
  #    environment:
  #      CONFIG_FILE_URL: https://pastebin.com/raw/NSufsj00
  #      CONFIG_FILE_PATH: /tmp/config.xml
  #    links:
  #      - "clickhouse-1:database"
  #    networks:
  #      - backend
  #
  #  serving-proxy-3:
  #    build:
  #      context: .
  #      dockerfile: ./Dockerfile
  #    expose:
  #      - "9100"
  #      - "9110"
  #    ports:
  #      - "9113:9110"
  #    environment:
  #      CONFIG_FILE_URL: https://pastebin.com/raw/NSufsj00
  #      CONFIG_FILE_PATH: /tmp/config.xml
  #    links:
  #      - "clickhouse-1:database"
  #    networks:
  #      - backend
  #
  #  serving-proxy-4:
  #    build:
  #      context: .
  #      dockerfile: ./Dockerfile
  #    expose:
  #      - "9100"
  #      - "9110"
  #    ports:
  #      - "9114:9110"
  #    environment:
  #      CONFIG_FILE_URL: https://pastebin.com/raw/NSufsj00
  #      CONFIG_FILE_PATH: /tmp/config.xml
  #    links:
  #      - "clickhouse-1:database"
  #    networks:
  #      - backend

  postgres-1:
    image: postgres:14.4
    command: >
      -c ssl=on 
      -c ssl_cert_file=/var/lib/postgresql/server.crt 
      -c ssl_key_file=/var/lib/postgresql/server.key
    ports:
      - "5432:5432"
      - "2345:2345"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-123456}
      PGDATA: /var/lib/postgresql/postgres-1/data/pgdata
    volumes:
      - source: pg_data
        target: /var/lib/postgresql/postgres-1/data
        type: volume
      - /Users/midhundarvin/certs/postgres/server.crt:/var/lib/postgresql/server.crt:ro
      - /Users/midhundarvin/certs/postgres/server.key:/var/lib/postgresql/server.key:ro
    networks:
      - backend

#  mysql:
#    image: "mysql/mysql-server"
#    container_name: mysql
#    command: [ "mysqld",
#               "--character-set-server=utf8mb4",
#               "--collation-server=utf8mb4_unicode_ci",
#               "--bind-address=0.0.0.0",
#               "--require_secure_transport=ON",
#               "--ssl-ca=/etc/certs/root-ca.pem",
#               "--ssl-cert=/etc/certs/server-cert.pem",
#               "--ssl-key=/etc/certs/server-key.pem",
#               "--default_authentication_plugin=mysql_native_password" ]
#    ports:
#      - "3306:3306"
#    volumes:
#      - type: volume
#        source: mysql_data
#        target: /var/lib/mysql
#      - type: bind
#        source: /Users/midhundarvin/certs/mysql
#        target: /etc/certs/
#    restart: always
#    environment:
#      MYSQL_ROOT_PASSWORD: "123456"
#      MYSQL_ROOT_HOST: "%"

  mysql-1:
    image: mysql/mysql-server
    # NOTE: use of "mysql_native_password" is not recommended: https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password
    # (this is just an example, not intended to be a production configuration)
    command: [ "mysqld",
               "--character-set-server=utf8mb4",
               "--collation-server=utf8mb4_unicode_ci",
               "--require_secure_transport=ON",
               "--ssl-ca=/etc/certs/root-ca.pem",
               "--ssl-cert=/etc/certs/server-cert.pem",
               "--ssl-key=/etc/certs/server-key.pem",
               "--default_authentication_plugin=mysql_native_password" ]
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-123456}
      MYSQL_ROOT_HOST: "%"
    volumes:
      - type: volume
        source: mysql_data
        target: /var/lib/mysql
      - type: bind
        source: /Users/midhundarvin/certs/mysql
        target: /etc/certs/
    ports:
      - "3306:3306"
    networks:
      - backend

volumes:
  pg_data:
  mysql_data:
networks:
  backend:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1400
